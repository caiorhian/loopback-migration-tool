{"version":3,"sources":["migrate.js"],"names":["argv","app","resolve","reject","on","specificDS","ds","length","specificModels","model","map","modelName","lowerCase","ignored_model","datasources","chain","toArray","uniq","value","dsByName","keyBy","elem","settings","name","dsName","forEach","keys","modelsByDS","models","Model","definition","dataSource","modelNameLower","includes","push","isUpdateMethod","method","promises","modelNames","dsLowerName","migrateMethod","autoupdate","automigrate","debug","info","promisify","context","then","all","catch"],"mappings":"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","file":"migrate.js","sourcesContent":["\"use strict\"\n/**\n * Created by garusis on 31/01/17.\n */\nimport _ from \"lodash\"\nimport Promise from \"bluebird\"\nimport dh from \"debug-helper\"\nimport {appLoader} from \"./utils\"\n\n\nexport default function (argv) {\n    let app = appLoader(argv.app)\n\n    return new Promise(function (resolve, reject) {\n        app.on('booted', function () {\n            let specificDS = !!argv.ds.length\n            let specificModels = !!argv.model.length\n\n            if (specificModels) argv.model = _.map(argv.model, (modelName) => _.lowerCase(modelName))\n            argv.ignored_model = _.map(argv.ignored_model, (modelName) => _.lowerCase(modelName))\n\n            let datasources = _.chain(app.datasources).toArray().uniq().value() //remove duplicated datasources\n            let dsByName = _.keyBy(datasources, (elem) => _.lowerCase(elem.settings.name))\n\n            if (specificDS) {\n                argv.ds = _.map(argv.ds, (dsName) => _.lowerCase(dsName))\n\n                datasources = {}\n                _.forEach(argv.ds, function (ds) { //filter to get the specific datasources\n                    datasources[ds] = dsByName[ds]\n                })\n            } else {\n                datasources = dsByName\n                argv.ds = _.keys(datasources)\n            }\n\n\n            let modelsByDS = {}\n\n            _.forEach(app.models, function (Model) {\n                let modelName = Model.definition.name\n                if (Model.dataSource) {\n                    let dsName = _.lowerCase(Model.dataSource.settings.name)\n                    let modelNameLower = _.lowerCase(modelName)\n                    if (!datasources[dsName] || _.includes(argv.ignored_model, modelNameLower)) return\n\n                    if (!specificModels || (specificModels && _.includes(argv.model, modelNameLower))) {\n                        if (!modelsByDS[dsName]) {\n                            modelsByDS[dsName] = []\n                        }\n                        modelsByDS[dsName].push(modelName)\n                    }\n                }\n            })\n\n            let isUpdateMethod = argv.method === 'update'\n            let promises = _.map(modelsByDS, function (modelNames, dsLowerName) {\n                let ds = datasources[dsLowerName]\n                let migrateMethod = isUpdateMethod ? ds.autoupdate : ds.automigrate\n                if (!migrateMethod) return Promise.resolve()\n\n                dh.debug.info(`Starting ${ds.settings.name} datasource's migration with ${argv.method} method`)\n                dh.debug.info(`Models to migrate ${JSON.stringify(modelNames)}`)\n                migrateMethod = Promise.promisify(migrateMethod, {context: ds})\n                return migrateMethod(modelNames)\n                    .then(function () {\n                        dh.debug.info(`${ds.settings.name} datasource migration have finished.`)\n                    })\n            })\n\n\n            return Promise.all(promises)\n                .then(resolve)\n                .catch(reject)\n        })\n    })\n}"],"sourceRoot":"./"}